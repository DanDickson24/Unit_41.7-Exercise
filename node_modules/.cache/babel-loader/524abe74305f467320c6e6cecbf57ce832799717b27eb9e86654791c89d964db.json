{"ast":null,"code":"var _jsxFileName = \"/home/dan/SchoolWork/Unit_41.7/exercise/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        // Use Math.random() to determine if the cell should start as lit or unlit\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    // Check if all cells in the board are turned off (false)\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = JSON.parse(JSON.stringify(oldBoard));\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy); // Above\n      flipCell(y + 1, x, boardCopy); // Below\n      flipCell(y, x - 1, boardCopy); // Left\n      flipCell(y, x + 1, boardCopy); // Right\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  // TODO\n\n  // make table board\n  const tableBoard = /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: cell,\n          flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [tableBoard, hasWon() && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-win\",\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n// TODO\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","JSON","parse","stringify","tableBoard","className","children","isLit","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dan/SchoolWork/Unit_41.7/exercise/src/Board.js"],"sourcesContent":["import React, { useState} from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        // Use Math.random() to determine if the cell should start as lit or unlit\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    // Check if all cells in the board are turned off (false)\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = JSON.parse(JSON.stringify(oldBoard));\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy); // Above\n      flipCell(y + 1, x, boardCopy); // Below\n      flipCell(y, x - 1, boardCopy); // Left\n      flipCell(y, x + 1, boardCopy); // Right\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  // TODO\n\n  // make table board\n  const tableBoard = (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, y) => (\n          <tr key={y}>\n            {row.map((cell, x) => (\n              <Cell\n                key={`${y}-${x}`}\n                isLit={cell}\n                flipCellsAroundMe={() => flipCellsAround(`${y}-${x}`)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  return (\n    <div>\n      {tableBoard}\n      {hasWon() && <div className=\"Board-win\">You Won!</div>}\n    </div>\n  );\n}\n  // TODO\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}